-- -------------------------------------------------------------
-- 
-- File Name: index-test\hdlsrc\Test_DOA\Calcul_Direction.vhd
-- Created: 2022-07-15 15:32:39
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Calcul_Direction
-- Source Path: Test_DOA/Calcul Direction
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Calcul_Direction IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        IndexIn                           :   IN    std_logic_vector(16 DOWNTO 0);  -- ufix17
        PhaseRefIn                        :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Phase1In                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Phase2In                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Phase3In                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Trigger                           :   IN    std_logic;
        Index                             :   OUT   std_logic_vector(16 DOWNTO 0);  -- ufix17
        PhaseRef                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En19
        Phase1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En19
        Phase2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En19
        Phase3                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En19
        );
END Calcul_Direction;


ARCHITECTURE rtl OF Calcul_Direction IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Trigger_delayed                  : std_logic;
  SIGNAL Trigger_emulated                 : std_logic;
  SIGNAL IndexIn_unsigned                 : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Delay3_out1                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Delay3_out1_bypass               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Delay3_out1_last_value           : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL PhaseRefIn_signed                : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Data_Type_Conversion2_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay1_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay1_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Phase1In_signed                  : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Data_Type_Conversion3_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay2_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay2_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Phase2In_signed                  : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Data_Type_Conversion4_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay4_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay4_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Phase3In_signed                  : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Data_Type_Conversion7_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay5_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay5_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19

BEGIN

  Trigger_delay_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        Trigger_delayed <= '1';
      ELSIF enb = '1' THEN
        Trigger_delayed <= Trigger;
      END IF;
    END IF;
  END PROCESS Trigger_delay_process;

  Trigger_emulated <= NOT Trigger_delayed AND Trigger;

  enb_gated <= Trigger_emulated AND enb;

  IndexIn_unsigned <= unsigned(IndexIn);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#00000#, 17);
      ELSIF enb_gated = '1' THEN
        Delay3_out1 <= IndexIn_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Index_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_last_value <= to_unsigned(16#00000#, 17);
      ELSIF enb_gated = '1' THEN
        Delay3_out1_last_value <= Delay3_out1_bypass;
      END IF;
    END IF;
  END PROCESS Index_bypass_process;


  
  Delay3_out1_bypass <= Delay3_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay3_out1;

  Index <= std_logic_vector(Delay3_out1_bypass);

  PhaseRefIn_signed <= signed(PhaseRefIn);

  Data_Type_Conversion2_out1 <= resize(PhaseRefIn_signed & '0' & '0', 32);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay1_out1 <= Data_Type_Conversion2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  PhaseRef_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay1_out1_last_value <= Delay1_out1_bypass;
      END IF;
    END IF;
  END PROCESS PhaseRef_bypass_process;


  
  Delay1_out1_bypass <= Delay1_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay1_out1;

  PhaseRef <= std_logic_vector(Delay1_out1_bypass);

  Phase1In_signed <= signed(Phase1In);

  Data_Type_Conversion3_out1 <= resize(Phase1In_signed & '0' & '0', 32);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay2_out1 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Phase1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay2_out1_last_value <= Delay2_out1_bypass;
      END IF;
    END IF;
  END PROCESS Phase1_bypass_process;


  
  Delay2_out1_bypass <= Delay2_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay2_out1;

  Phase1 <= std_logic_vector(Delay2_out1_bypass);

  Phase2In_signed <= signed(Phase2In);

  Data_Type_Conversion4_out1 <= resize(Phase2In_signed & '0' & '0', 32);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay4_out1 <= Data_Type_Conversion4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Phase2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay4_out1_last_value <= Delay4_out1_bypass;
      END IF;
    END IF;
  END PROCESS Phase2_bypass_process;


  
  Delay4_out1_bypass <= Delay4_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay4_out1;

  Phase2 <= std_logic_vector(Delay4_out1_bypass);

  Phase3In_signed <= signed(Phase3In);

  Data_Type_Conversion7_out1 <= resize(Phase3In_signed & '0' & '0', 32);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay5_out1 <= Data_Type_Conversion7_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Phase3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay5_out1_last_value <= Delay5_out1_bypass;
      END IF;
    END IF;
  END PROCESS Phase3_bypass_process;


  
  Delay5_out1_bypass <= Delay5_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay5_out1;

  Phase3 <= std_logic_vector(Delay5_out1_bypass);

END rtl;

