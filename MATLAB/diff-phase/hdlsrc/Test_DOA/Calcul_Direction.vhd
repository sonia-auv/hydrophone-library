-- -------------------------------------------------------------
-- 
-- File Name: diff-phase\hdlsrc\Test_DOA\Calcul_Direction.vhd
-- Created: 2022-07-04 20:03:20
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Calcul_Direction
-- Source Path: Test_DOA/Calcul Direction
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Calcul_Direction IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Index                             :   IN    std_logic_vector(16 DOWNTO 0);  -- ufix17
        PhaseRef                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Phase1                            :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Phase2                            :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Phase3                            :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En17
        Trigger                           :   IN    std_logic;
        Frequence                         :   OUT   std_logic_vector(26 DOWNTO 0);  -- ufix27
        X                                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En19
        Y                                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En19
        Z                                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En19
        );
END Calcul_Direction;


ARCHITECTURE rtl OF Calcul_Direction IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Trigger_delayed                  : std_logic;
  SIGNAL Trigger_emulated                 : std_logic;
  SIGNAL Index_unsigned                   : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Constant5_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Product2_out1                    : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay3_out1                      : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay3_out1_bypass               : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay3_out1_last_value           : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Phase1_signed                    : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL PhaseRef_signed                  : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Subtract_sub_cast                : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Subtract_sub_cast_1              : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Subtract_out1                    : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Data_Type_Conversion1_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay1_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay1_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Phase2_signed                    : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Subtract1_sub_cast               : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Subtract1_sub_cast_1             : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Subtract1_out1                   : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Data_Type_Conversion5_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay2_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay2_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Phase3_signed                    : signed(19 DOWNTO 0);  -- sfix20_En17
  SIGNAL Subtract2_sub_cast               : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Subtract2_sub_cast_1             : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Subtract2_out1                   : signed(20 DOWNTO 0);  -- sfix21_En17
  SIGNAL Data_Type_Conversion6_out1       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay4_out1_bypass               : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Delay4_out1_last_value           : signed(31 DOWNTO 0);  -- sfix32_En19

BEGIN

  Trigger_delay_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        Trigger_delayed <= '1';
      ELSIF enb = '1' THEN
        Trigger_delayed <= Trigger;
      END IF;
    END IF;
  END PROCESS Trigger_delay_process;

  Trigger_emulated <= NOT Trigger_delayed AND Trigger;

  enb_gated <= Trigger_emulated AND enb;

  Index_unsigned <= unsigned(Index);

  Constant5_out1 <= to_unsigned(16#3E8#, 10);

  Product2_out1 <= Index_unsigned * Constant5_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#0000000#, 27);
      ELSIF enb_gated = '1' THEN
        Delay3_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Frequence_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1_last_value <= to_unsigned(16#0000000#, 27);
      ELSIF enb_gated = '1' THEN
        Delay3_out1_last_value <= Delay3_out1_bypass;
      END IF;
    END IF;
  END PROCESS Frequence_bypass_process;


  
  Delay3_out1_bypass <= Delay3_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay3_out1;

  Frequence <= std_logic_vector(Delay3_out1_bypass);

  Phase1_signed <= signed(Phase1);

  PhaseRef_signed <= signed(PhaseRef);

  Subtract_sub_cast <= resize(Phase1_signed, 21);
  Subtract_sub_cast_1 <= resize(PhaseRef_signed, 21);
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  Data_Type_Conversion1_out1 <= resize(Subtract_out1 & '0' & '0', 32);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay1_out1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  X_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay1_out1_last_value <= Delay1_out1_bypass;
      END IF;
    END IF;
  END PROCESS X_bypass_process;


  
  Delay1_out1_bypass <= Delay1_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay1_out1;

  X <= std_logic_vector(Delay1_out1_bypass);

  Phase2_signed <= signed(Phase2);

  Subtract1_sub_cast <= resize(Phase2_signed, 21);
  Subtract1_sub_cast_1 <= resize(PhaseRef_signed, 21);
  Subtract1_out1 <= Subtract1_sub_cast - Subtract1_sub_cast_1;

  Data_Type_Conversion5_out1 <= resize(Subtract1_out1 & '0' & '0', 32);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay2_out1 <= Data_Type_Conversion5_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Y_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay2_out1_last_value <= Delay2_out1_bypass;
      END IF;
    END IF;
  END PROCESS Y_bypass_process;


  
  Delay2_out1_bypass <= Delay2_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay2_out1;

  Y <= std_logic_vector(Delay2_out1_bypass);

  Phase3_signed <= signed(Phase3);

  Subtract2_sub_cast <= resize(Phase3_signed, 21);
  Subtract2_sub_cast_1 <= resize(PhaseRef_signed, 21);
  Subtract2_out1 <= Subtract2_sub_cast - Subtract2_sub_cast_1;

  Data_Type_Conversion6_out1 <= resize(Subtract2_out1 & '0' & '0', 32);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay4_out1 <= Data_Type_Conversion6_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Z_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1_last_value <= to_signed(0, 32);
      ELSIF enb_gated = '1' THEN
        Delay4_out1_last_value <= Delay4_out1_bypass;
      END IF;
    END IF;
  END PROCESS Z_bypass_process;


  
  Delay4_out1_bypass <= Delay4_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Delay4_out1;

  Z <= std_logic_vector(Delay4_out1_bypass);

END rtl;

