-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\franc\OneDrive\Documents techniques\ETS\SONIA\Hydro software\Hydro_Update\slprj\hdlsrc\DOA_rearanged\Sample_and_Hold.vhd
-- Created: 2021-06-21 21:49:40
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sample_and_Hold
-- Source Path: DOA_rearanged/Maximum Hydro 1/Sample and Hold
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Sample_and_Hold IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In_rsvd                           :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En8
        Trigger                           :   IN    std_logic;
        alpha                             :   OUT   std_logic_vector(26 DOWNTO 0)  -- sfix27_En8
        );
END Sample_and_Hold;


ARCHITECTURE rtl OF Sample_and_Hold IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Trigger_delayed                  : std_logic;
  SIGNAL Trigger_emulated                 : std_logic;
  SIGNAL In_signed                        : signed(26 DOWNTO 0);  -- sfix27_En8
  SIGNAL In_bypass                        : signed(26 DOWNTO 0);  -- sfix27_En8
  SIGNAL In_last_value                    : signed(26 DOWNTO 0);  -- sfix27_En8

BEGIN
  Trigger_delay_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF reset = '1' THEN
        Trigger_delayed <= '0';
      ELSIF enb = '1' THEN
        Trigger_delayed <= Trigger;
      END IF;
    END IF;
  END PROCESS Trigger_delay_process;

  Trigger_emulated <= NOT Trigger AND Trigger_delayed;

  enb_gated <= Trigger_emulated AND enb;

  In_signed <= signed(In_rsvd);

  alpha_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        In_last_value <= to_signed(16#0000000#, 27);
      ELSIF enb_gated = '1' THEN
        In_last_value <= In_bypass;
      END IF;
    END IF;
  END PROCESS alpha_bypass_process;


  
  In_bypass <= In_last_value WHEN Trigger_emulated = '0' ELSE
      In_signed;

  alpha <= std_logic_vector(In_bypass);

END rtl;

